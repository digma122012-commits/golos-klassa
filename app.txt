import os
import sqlite3
import base64
import re
from flask import Flask, request, redirect, render_template_string

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
app = Flask(__name__)
app.secret_key = os.environ.get("SECRET_KEY", "render-secret-key-for-school")

DB_PATH = 'ideas.db'
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD", "school123")
MAX_IMAGE_SIZE = 2 * 1024 * 1024  # 2 MB

# --- –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–ª—è —à–∫–æ–ª—ã) ---
BAD_WORDS = {
    # –ú–∞—Ç –∏ –≥—Ä—É–±–∞—è –ª–µ–∫—Å–∏–∫–∞
    '–±–ª—è', '–±–ª—è–¥', '–µ–±', '—ë–±', '—Ö—É–π', '–ø–∏–∑–¥', '—Å—É–∫–∞', '—Å—É—á', '–Ω–∞—Ö—É–π', '–Ω–∞—Ö–µ—Ä', '–æ—Ö—É–µ–ª', '–æ—Ö—É–µ–≤', '–∞—Ö—É–µ—Ç—å',
    '–≥–∞–Ω–¥–æ–Ω', '–≥–æ–≤–Ω–æ', '–¥—Ä–æ—á', '–µ–±–∞–ª', '–µ–±–∞–Ω', '–µ–±–∞—à', '–∑–∞–ª—É–ø', '–º—É–¥–∏–ª', '–º—É–¥–æ–∑', '–ø–∏–¥–æ—Ä', '–ø–µ–¥–∏–∫', '–ø–∏–¥–∞—Ä',
    '—Å—Ä–∞—Ç—å', '—Å—Å–∞—Ç—å', '—Ç—Ä–∞—Ö', '—á–º–æ', '—à–ª—é—Ö', '—à–∞–ª–∞–≤', '—É—Ä–æ–¥', '—Å–∫–æ—Ç–∏–Ω–∞', '–º–µ—Ä–∑–∞–≤–µ—Ü', '–≥–∞–¥', '—Å–≤–æ–ª–æ—á—å',
    # 18+ –∏ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    '–ø–æ—Ä–Ω–æ', '—Å–µ–∫—Å', '–∏–Ω—Ç–∏–º', '—ç—Ä–æ—Ç–∏–∫', '–≥–æ–ª—ã–π', '–æ–±–Ω–∞–∂', '–Ω—é–¥', 'nude', 'porn', 'xxx', 'sex', 'boobs', 'dick',
    '–∂–µ—Å—Ç–æ–∫–æ', '—É–±–∏—Ç—å', '—Å–º–µ—Ä—Ç—å', '–ø–æ–≤–µ—Å–∏—Ç—å—Å—è', '—Å—É–∏—Ü–∏–¥', '–Ω–∞—Ä–∫–æ—Ç–∏–∫', '–º–∞—Ä–∏—Ö—É–∞–Ω', '–∞–º—Ñ–µ—Ç–∞–º–∏–Ω', '–∫–æ–∫–∞–∏–Ω',
    '–æ—Ä—É–∂–∏–µ', '–±–æ–º–±–∞', '–≤–∑–æ—Ä–≤–∞—Ç—å', '—Ç–µ—Ä—Ä–æ—Ä', '–∫—Ä–æ–≤—å', '—Ä–µ–∑–∞—Ç—å', '–Ω–æ–∂', '–ø–∏—Å—Ç–æ–ª–µ—Ç', '–Ω–∞—Å–∏–ª—å', '–∏–∑–Ω–∞—Å–∏–ª'
}

def contains_bad_words(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä, —Å–∏–º–≤–æ–ª—ã, –æ–ø–µ—á–∞—Ç–∫–∏)"""
    if not text:
        return False
    
    # –£–¥–∞–ª—è–µ–º –≤—Å—ë –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    clean = re.sub(r'[^–∞-—èa-z\s]', '', text.lower())
    words = clean.split()
    
    for word in words:
        for bad in BAD_WORDS:
            if bad in word:  # —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "–µ–±–∞–Ω—ã–π" ‚Üí —Å–æ–¥–µ—Ä–∂–∏—Ç "–µ–±–∞–Ω"
                return True
    return False

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS ideas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT NOT NULL,
            ip TEXT NOT NULL,
            image_data TEXT,
            votes INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS votes (
            idea_id INTEGER,
            ip TEXT,
            PRIMARY KEY (idea_id, ip)
        )
    ''')
    conn.commit()
    conn.close()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
def process_image(file):
    if not file or not file.filename:
        return None
    ext = file.filename.lower().split('.')[-1]
    if ext not in {'png', 'jpg', 'jpeg', 'gif', 'webp'}:
        return None
    file.seek(0, os.SEEK_END)
    size = file.tell()
    file.seek(0)
    if size > MAX_IMAGE_SIZE:
        return None
    try:
        data = file.read()
        b64 = base64.b64encode(data).decode('utf-8')
        mime = 'image/jpeg' if ext in {'jpg', 'jpeg'} else \
               'image/png' if ext == 'png' else \
               'image/gif' if ext == 'gif' else 'image/webp'
        return f"{mime};base64,{b64}"
    except:
        return None

# --- HTML: –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
def get_index_html(ideas):
    ideas_html = ""
    for idea in ideas:
        img = f'<img src="{idea["image_data"]}" class="idea-img">' if idea["image_data"] else ""
        ideas_html += f'''
        <div class="idea">
            {img}
            <p>{idea["text"]}</p>
            <div class="meta">
                <span>–ì–æ–ª–æ—Å–æ–≤: {idea["votes"]}</span>
                <a href="/vote/{idea["id"]}">‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å</a>
            </div>
        </div>
        '''
    return f'''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>–ì–æ–ª–æ—Å –∫–ª–∞—Å—Å–∞</title>
        <style>
            * {{ box-sizing: border-box; }}
            body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f5f7fa; margin: 0; padding: 16px; color: #333; }}
            .container {{ max-width: 700px; margin: 0 auto; background: white; padding: 20px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); }}
            h1 {{ color: #2c3e50; text-align: center; margin-top: 0; }}
            textarea {{ width: 100%; padding: 12px; margin: 10px 0; border: 1px solid #ddd; border-radius: 8px; font-size: 16px; resize: vertical; min-height: 80px; }}
            button {{ background: #3498db; color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-size: 16px; width: 100%; margin-top: 10px; }}
            input[type="file"] {{ margin: 10px 0; width: 100%; }}
            .idea {{ background: #f8f9fa; padding: 16px; margin: 16px 0; border-radius: 10px; border-left: 4px solid #3498db; }}
            .idea-img {{ max-width: 100%; height: auto; border-radius: 8px; margin-bottom: 10px; display: block; }}
            .meta {{ display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px; font-size: 14px; color: #666; }}
            .meta a {{ color: #e74c3c; text-decoration: none; font-weight: bold; }}
            .error {{ color: #e74c3c; background: #fdf2f2; padding: 10px; border-radius: 6px; margin: 10px 0; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üó£Ô∏è –ì–æ–ª–æ—Å –∫–ª–∞—Å—Å–∞</h1>
            <p>–ê–Ω–æ–Ω–∏–º–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏–¥–µ–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π —Ñ–æ—Ç–æ!</p>
            <form method="POST" action="/add" enctype="multipart/form-data">
                <textarea name="text" placeholder="–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)..." maxlength="200" required></textarea>
                <input type="file" name="image" accept="image/*">
                <button type="submit">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é</button>
            </form>
            <hr>
            <h2>–ò–¥–µ–∏ (–ø–æ –≥–æ–ª–æ—Å–∞–º)</h2>
            {ideas_html if ideas_html else "<p>–ü–æ–∫–∞ –Ω–µ—Ç –∏–¥–µ–π. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!</p>"}
        </div>
    </body>
    </html>
    '''

# --- HTML: –∞–¥–º–∏–Ω–∫–∞ ---
def get_admin_html(ideas, password):
    ideas_html = ""
    for idea in ideas:
        img = f'<img src="{idea["image_data"]}" class="admin-img">' if idea["image_data"] else "<span>–ù–µ—Ç —Ñ–æ—Ç–æ</span>"
        ideas_html += f'''
        <div class="idea">
            {img}
            <p><strong>{idea["text"]}</strong></p>
            <div class="meta">
                <span>IP: {idea["ip"]}</span>
                <span>–ì–æ–ª–æ—Å–æ–≤: {idea["votes"]}</span>
                <a href="/admin/delete/{idea["id"]}?password={password}" onclick="return confirm('–£–¥–∞–ª–∏—Ç—å?')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</a>
            </div>
        </div>
        '''
    return f'''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>–ê–¥–º–∏–Ω–∫–∞ ‚Äî –ì–æ–ª–æ—Å –∫–ª–∞—Å—Å–∞</title>
        <style>
            * {{ box-sizing: border-box; }}
            body {{ font-family: sans-serif; background: #f9f9f9; padding: 16px; }}
            .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }}
            .idea {{ background: #fef6f6; padding: 15px; margin: 15px 0; border-radius: 8px; }}
            .admin-img {{ max-width: 200px; height: auto; border: 1px solid #eee; margin: 5px 0; }}
            .meta {{ display: flex; flex-wrap: wrap; gap: 10px; margin-top: 8px; font-size: 14px; }}
            .meta a {{ color: #c0392b; text-decoration: none; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h2>üîê –ê–¥–º–∏–Ω–∫–∞ (–º–æ–¥–µ—Ä–∞—Ü–∏—è)</h2>
            {ideas_html}
            <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        </div>
    </body>
    </html>
    '''

# --- –†–æ—É—Ç—ã ---
@app.route('/')
def index():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    ideas = [dict(row) for row in conn.execute("SELECT id, text, votes, image_data FROM ideas ORDER BY votes DESC, created_at DESC")]
    conn.close()
    return get_index_html(ideas)

@app.route('/add', methods=['POST'])
def add_idea():
    text = request.form.get('text', '').strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    if not text or len(text) > 200:
        return redirect('/')
    if contains_bad_words(text):
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É, –Ω–æ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return redirect('/')
    
    user_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
    image_data = process_image(request.files.get('image'))
    
    conn = sqlite3.connect(DB_PATH)
    conn.execute("INSERT INTO ideas (text, ip, image_data) VALUES (?, ?, ?)", (text, user_ip, image_data))
    conn.commit()
    conn.close()
    return redirect('/')

@app.route('/vote/<int:idea_id>')
def vote(idea_id):
    user_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
    conn = sqlite3.connect(DB_PATH)
    exists = conn.execute("SELECT 1 FROM votes WHERE idea_id = ? AND ip = ?", (idea_id, user_ip)).fetchone()
    if not exists:
        conn.execute("UPDATE ideas SET votes = votes + 1 WHERE id = ?", (idea_id,))
        conn.execute("INSERT INTO votes (idea_id, ip) VALUES (?, ?)", (idea_id, user_ip))
        conn.commit()
    conn.close()
    return redirect('/')

@app.route('/admin')
def admin_panel():
    password = request.args.get('password')
    if password != ADMIN_PASSWORD:
        return redirect('/')
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    ideas = [dict(row) for row in conn.execute("SELECT * FROM ideas ORDER BY created_at DESC")]
    conn.close()
    return get_admin_html(ideas, password)

@app.route('/admin/delete/<int:idea_id>')
def delete_idea(idea_id):
    password = request.args.get('password')
    if password != ADMIN_PASSWORD:
        return redirect('/')
    conn = sqlite3.connect(DB_PATH)
    conn.execute("DELETE FROM ideas WHERE id = ?", (idea_id,))
    conn.execute("DELETE FROM votes WHERE idea_id = ?", (idea_id,))
    conn.commit()
    conn.close()
    return redirect(f'/admin?password={password}')

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    init_db()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)